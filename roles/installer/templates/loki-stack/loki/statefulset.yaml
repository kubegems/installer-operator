#jinja2:lstrip_blocks: True
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-system
  namespace: gemcloud-logging-system
  labels:
    app.kubernetes.io/name: loki-system
spec:
  replicas: 1
  serviceName:  loki-system-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: loki-system
  template:
    metadata:
      labels:
        app.kubernetes.io/name: loki-system
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: loki-system
                namespaces:
                  - "gemcloud-logging-system"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      {% if global.imagepullsecret is defined %}
      imagePullSecrets:
        - name: {{ global.imagepullsecret | default('kubegems')}}
      {% endif %}
      initContainers:
      - name: initialization
        image: "{{ global.repository | default('docker.io/kubegems') }}/busybox:latest"
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            set -x
            mkdir -p /data/scratch
            mkdir -p /data/wal
        volumeMounts:
          - name: data
            mountPath: /data
      containers:
      - name: loki-system
        image: "{{ global.repository | default('docker.io/kubegems') }}/loki:2.4.1"
        args:
        - -config.file=/etc/loki/local-config.yaml
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3100
          name: http-3100
          protocol: TCP
        - containerPort: 9095
          name: grpc-9095
          protocol: TCP
        - containerPort: 7946
          name: tcp-7946
          protocol: TCP
        resources:
          limits:
            cpu: "{{ core_plugins.logging.operator.loki.resources.cpu | default('4')}}"
            memory: "{{ core_plugins.logging.operator.loki.resources.memory | default('8Gi')}}"
          requests:
            cpu: "500m"
            memory: "1Gi"
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki/
          readOnly: true
        - name: rules
          mountPath: /rules/fake/
          readOnly: true
        - name: data
          mountPath: /data
        - mountPath: /etc/localtime
          name: timezone
          readOnly: true
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: 3100
          timeoutSeconds: 5
        securityContext:
          runAsUser: 0
          capabilities:
            add: []
            drop:
            - ALL
          readOnlyRootFilesystem: false
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      volumes:
      - name: loki-config
        configMap:
          name: loki-local-config
      - name: rules
        configMap:
          name: loki-recording-rules
      - hostPath:
          path: /etc/localtime
        name: timezone
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: loging-system
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "{{ core_plugins.logging.operator.loki.persistent.size | default('50Gi') }}"
      {% if core_plugins.logging.operator.loki.persistent.storageclass is defined %}
      storageClassName: {{ core_plugins.logging.operator.loki.persistent.storageclass }}
      {% elif global.storageclass is defined %}
      storageClassName: {{ global.storageclass }}
      {% else %}
      storageClassName: local-path 
      {% endif %}
