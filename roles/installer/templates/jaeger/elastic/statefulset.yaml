#jinja2:lstrip_blocks: True
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gems-elasticsearch
  namespace: observability
  labels:
    app: "gems-elasticsearch"
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: gems-elasticsearch-headless
  selector:
    matchLabels:
      app: "gems-elasticsearch"
  {% if core_plugins.jaeger.operator.elasticsearch.mode == "cluster" %}
  replicas: 3
  {% else %}
  replicas: 1
  {% endif %}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: gems-elasticsearch
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ core_plugins.jaeger.operator.elasticsearch.persistent.size | default('100Gi') }}
      {% if core_plugins.jaeger.operator.elasticsearch.persistent.storageclass is defined %}
      storageClassName: {{ core_plugins.jaeger.operator.elasticsearch.persistent.storageclass }}
      {% else %}
      storageClassName: {{ global.storageclass | default('local-path')}}
      {% endif %}
  template:
    metadata:
      name: "gems-elasticsearch"
      labels:
        app: "gems-elasticsearch"
      annotations:
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "gems-elasticsearch"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
      enableServiceLinks: true
      {% if global.imagepullsecret is defined %}
      imagePullSecrets:
        - name: {{ global.imagepullsecret | default('kubegems')}}
      {% endif %}
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image:  "{{ global.repository | default('docker.io/kubegems')}}/elasticsearch:7.13.2"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=1.048575e+06"]
        resources:
          {}

      containers:
      - name: "gems-elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "{{ global.repository | default('docker.io/kubegems')}}/elasticsearch:7.13.2"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 2000m
            memory: 4.5Gi
          requests:
            cpu: 500m
            memory: 512Mi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {% if core_plugins.jaeger.operator.elasticsearch.mode == "cluster" %}    
          - name: cluster.initial_master_nodes
            value: "gems-elasticsearch-0,gems-elasticsearch-1,gems-elasticsearch-2,"
          {% else %}
          - name: cluster.initial_master_nodes
            value: "gems-elasticsearch-0"
          {% endif %}
          - name: discovery.seed_hosts
            value: "gems-elasticsearch-headless"
          - name: cluster.name
            value: "gems-elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ES_JAVA_OPTS
            value: "-Xmx4096m -Xms4096m"
          - name: node.data
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.master
            value: "true"
          - name: node.ml
            value: "true"
          - name: node.remote_cluster_client
            value: "true"
        volumeMounts:
          - name: "gems-elasticsearch"
            mountPath: /usr/share/elasticsearch/data